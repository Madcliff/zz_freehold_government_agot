zz_become_landed_transfer_no_ennobled_modifier_effect = {
	destroy_laamp_effect = { ADVENTURER = $TITLE_RECEIVER$ }
	$TITLE_RECEIVER$ = {
		set_variable = {
			name = ascended_throne_reason
			value = $REASON$
			weeks = 1
		}
	}
	create_title_and_vassal_change = {
		type = $TYPE$
		add_claim_on_loss = yes
		save_scope_as = title_change
	}
	ordered_in_list = {
		list = $TITLE_LIST$
		limit = {
			is_landless_type_title = no
			is_noble_family_title = no
		}
		order_by = tier
		save_scope_as = new_primary_title
	}
	every_in_list = {
		list = $TITLE_LIST$
		limit = {
			is_leased_out = no
			is_landless_type_title = no
			is_head_of_faith = no
		}
		change_title_holder_include_vassals = {
			holder = $TITLE_RECEIVER$
			change = scope:title_change
			take_baronies = yes
		}
	}
	ordered_in_list = {
		list = $TITLE_LIST$
		order_by = tier
		save_scope_as = new_primary_title
	}
	resolve_title_and_vassal_change = scope:title_change
	
	$TITLE_RECEIVER$ = {
		change_government = feudal_government 
	}
}

convert_to_freehold_from_feudel_effect = {
	save_scope_as = administrative_liege

	change_to_freehold_effect = yes

	save_scope_as = administrative_liege

	#Direct Vassals who fulfill the ep3_vassal_will_become_admin criteria are converted. Vassals above 25 opinion always accept
	#Vassals are converted as a hierarchy. If a king is converted we convert all who are valid below that king (so his dukes, their counts, and their barons) are all converted.
	#If a vassal does not convert (because of not accepting or because they are outside of the de jure empire, etc) then the vassals below them are _not_ converted either.

	#Human vassals are given a choice to convert or not in the ping event, even if powerful or having very good relation.

	hidden_effect = { 
		save_scope_as = actor
		every_powerful_vassal = { #All valid powerful vassals auto convert - their support was required to take the decision.
			limit = {
				ep3_vassal_will_become_admin = yes
				is_ai = yes
			}
			save_scope_as = recipient
			change_to_freehold_effect = yes	
			every_vassal = { #Everyone below also converts
				limit = {
					ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
					is_ai = yes
				}
				save_scope_as = recipient	
				change_to_freehold_effect = yes
				every_vassal = { #Everyone below also converts (could be Counts, could be Barons)
					limit = {
						ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
						is_ai = yes
					}
					save_scope_as = recipient	
					change_to_freehold_effect = yes
					every_vassal = { #Everyone below also converts could be Barons)
						limit = {
							ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
							is_ai = yes
						}
						save_scope_as = recipient
						change_to_freehold_effect = yes
					}
				}
			}
		}
		every_vassal = {
			limit = {
				ep3_vassal_will_become_admin = yes
				trigger_if = { #Dukes and above can say no
					limit = {
						primary_title.tier >= tier_duchy
						is_ai = yes
					}
					opinion = {
						target = scope:administrative_liege
						value > 25
					}
				}
			}
			save_scope_as = recipient
			change_to_freehold_effect = yes
			every_vassal = { #Everyone below also converts (could be Counts, could be Dukes)
				limit = {
					ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
					is_ai = yes
				}
				save_scope_as = recipient	
				change_to_freehold_effect = yes
				every_vassal = { #Everyone below also converts (Could be Counts, could be Barons)
					limit = {
						ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
						is_ai = yes
					}
					save_scope_as = recipient	
					change_to_freehold_effect = yes
					every_vassal = { #Everyone below also converts (could be Barons)
						limit = {
							ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
							is_ai = yes
						}
						save_scope_as = recipient
						change_to_freehold_effect = yes
					}
				}
			}
		}
		every_vassal = {
			limit = {
				ep3_vassal_will_become_admin = yes
				trigger_if = { #Dukes and above can say no
					limit = {
						primary_title.tier >= tier_duchy
						is_ai = yes
					}
					opinion = {
						target = scope:administrative_liege
						value > 0
					}
				}
			}
			random_list = {
				10 = { } #10% of the vassals that like us less than 25 but more than 0 still convert.
				90 = {
					save_scope_as = recipient
					change_to_freehold_effect = yes
					every_vassal = { #Everyone below also converts (could be Counts, could be Dukes)
						limit = {
							ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
							is_ai = yes
						}
						save_scope_as = recipient	
						change_to_freehold_effect = yes
						every_vassal = { #Everyone below also converts (Could be Counts, could be Barons)
							limit = {
								ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
								is_ai = yes
							}
							save_scope_as = recipient	
							change_to_freehold_effect = yes
							every_vassal = { #Everyone below also converts (could be Barons)
								limit = {
									ep3_vassal_will_become_admin = yes #We still don't want mayors and bishops
									is_ai = yes
								}
								save_scope_as = recipient	
								change_to_freehold_effect = yes
							}
						}
					}
				}
			}
		}
		every_vassal = {
			limit = {
				highest_held_title_tier >= tier_duchy
				house.house_head ?= this
				government_has_flag = government_is_administrative
				NOT = {
					any_held_title = { is_noble_family_title = yes }
				}
			}
			create_noble_family_effect = yes
		}
	}

	if = {
		limit = {
			is_independent_ruler = yes
		}
		add_character_modifier = {
			modifier = first_admin_emperor
		}
	}
	
	change_influence = admin_convert_influence_value
	if = {
		limit = {
			is_independent_ruler = yes
		}
		add_legitimacy_effect = { LEGITIMACY = admin_convert_legitimacy_value } #One Time Legitimacy Boost
	}

	custom_description_no_bullet = {
		text = vassals_can_become_administrative
	}
	custom_tooltip = powerful_vassals_become_administrative
	custom_tooltip = vassals_become_administrative
	custom_tooltip = vassals_who_may_switch_to_administrative

}

create_noble_family_dragonrider_effect = {
	debug_log = create_noble_family_title

	save_scope_as = new_noble_family_holder
	hidden_effect = { # NF can only be held by house heads
		house ?= {
			if = {
				limit = { house_head != scope:new_noble_family_holder }
				set_house_head = scope:new_noble_family_holder
			}
		}
	}
	give_noble_family_title = {
		name = noble_family_name
		article = DEFAULT_TITLE_NAME_ARTICLE
		government = freehold_government
		save_scope_as = new_title
	}
	scope:new_title = {
		holder = {
			save_scope_as = noble_family_head
			change_government = freehold_government
		}
		set_coa = scope:noble_family_head.house
	}
	custom_description = {
		text = create_noble_family_tt
	}

	#Notifications
	top_liege ?= {
		every_vassal = {
			limit = {
				is_ai = no
				NOT = { this = scope:new_noble_family_holder }
			}
			trigger_event = {
				id = ep3_emperor_yearly.2410
				days = 1
			}
		}
	}

	debug_log_scopes = yes
}

change_to_freehold_hereditary_effect = {
	scope:recipient = {
		save_scope_as = petition_vassal
		every_held_title = {
			limit = {
				tier = scope:petition_vassal.highest_held_title_tier
				is_landless_type_title = no
				is_noble_family_title = no
			}
			custom_tooltip = {
				text = petition_liege_house_governorship_rights_tt
				set_variable = {
					name = petition_house_rights
					value = scope:petition_vassal.house
					years = 100
				}
			}
		}
	}
}
change_to_freehold_effect = {
	save_scope_as = governor
	
	if = {
		limit = {
			NOT = { government_has_flag = government_is_freehold }
		}
		change_government = freehold_government
		save_scope_as = new_admin
	}
	
	
	if = {
		limit = {
			primary_title.tier >= tier_duchy
			house.house_head = {
				NOT = {
					any_held_title = { is_noble_family_title = yes }
				}
			}
		}
		create_noble_family_dragonrider_effect = yes
	}

	hidden_effect = {
		if = {
			limit = {
				is_governor = yes
				NOT = { has_trait = governor }
			}
			add_trait = governor
		}
	}
	if = {
		limit = { exists = scope:new_admin }
		domicile ?= {
			#set_up_domicile_estate_effect = yes
		}
	}
}

change_to_freehold_interaction_effect = {
	scope:actor = {
		pay_short_term_gold = {
			target = scope:recipient
			gold = {
				value = 50
				scope:recipient = {
					if = {
						limit = { highest_held_title_tier >= tier_kingdom }
						multiply = 10
					}
					else_if = {
						limit = { highest_held_title_tier >= tier_duchy }
						multiply = 6
					}
					else_if = {
						limit = { highest_held_title_tier >= tier_county }
						multiply = 3
					}
				}
				if = {
					limit = { scope:gold ?= yes }
					add = scope:actor.medium_gold_value
				}
				if = {
					limit = {
						scope:actor = { has_realm_law_flag = admin_change_vassal_gov_cheaper }
					}
					multiply = 0.5
				}
			}
		}
	}
	scope:recipient = { change_to_freehold_effect = yes }
	if = {
		limit = {
			scope:hook = yes
			scope:actor = { has_usable_hook = scope:recipient }
		}
		scope:actor = { use_hook = scope:recipient }
	}
	if = {
		limit = { scope:hereditary = yes }
		scope:recipient = { save_scope_as = petition_vassal }
		change_to_freehold_hereditary_effect = yes
	}
	if = {
		limit = { scope:influence = yes }
		scope:actor = {
			change_influence = {
				value = massive_influence_loss
			}
		}
	}
}




zz_adopt_to_house_effect = {
	$ADOPTER$ = {
		$CHILD$ = {
			hidden_effect = {
				set_house = $ADOPTER$.house
				found_cadet_house_decision_effect = {
					CHARACTER = scope:recipient
					PRESTIGE = 0
				}
			}
			custom_tooltip = adventurer_adoption_child_tt
			# Remove bastard traits
			if = {
				limit = {
					has_any_bastard_trait_trigger = yes
				}
				remove_all_bastard_traits = yes
			}
			# Remove disinherited if you're the house head.
			if = {
				limit = {
					$ADOPTER$.house.house_head = $ADOPTER$
					has_trait = disinherited
				}
				remove_trait = disinherited
			}
		}
	}
	#adopted child should travel to new parent
	$CHILD$ = {
		if = {
			limit = { exists = $ADOPTER$.capital_province } # Ward heads to landed Guardian
			$ADOPTER$.capital_province = { save_scope_as = destination_province }
		}
		else_if = { # Ward heads to Guardian's host
			limit = { exists = $ADOPTER$.host.capital_province }
			$ADOPTER$.host.capital_province = { save_scope_as = destination_province }
		}
		else = {
			$ADOPTER$.location = { save_scope_as = destination_province }
		}
		save_scope_as = adoptee
		$ADOPTER$ = {
			save_scope_as = adopter
		}
		if = {
			limit = {
				any_relation = {
					type = guardian
					NOT = { this = $ADOPTER$ }
				}
			}
			random_relation = {
				type = guardian
				limit = { NOT = { this = $ADOPTER$ } }
				save_scope_as = old_guardian
			}
			remove_guardian_effect = {
				GUARDIAN = scope:old_guardian
				WARD = scope:adoptee
				RETURN_WARD = no
				HIDE_OPINION = no
			}
		}
		if = {
			limit = { NOT = { scope:destination_province = $CHILD$.location } }
			set_variable = {
				name = adoptee_travelling_to_adopter
				years = 2
				value = scope:adopter
			}
			start_travel_plan = {
				destination = scope:destination_province
				on_start_on_action = on_adoptee_depart_for_adopter
				on_travel_planner_cancel_on_action = on_adoptee_depart_travel_planner_exit
				on_arrival_on_action = on_adoptee_arrive_at_adopter
				on_arrival_destinations = last
				return_trip = no # One way
			}
			custom_tooltip = adoptee_leaves_for_adopter_tt
		}
	}
}